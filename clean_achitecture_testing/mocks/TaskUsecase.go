// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "task7/domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: task
func (_m *TaskUsecase) CreateTask(task domain.Task) interface{} {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(domain.Task) interface{}); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// DeleteTask provides a mock function with given fields: userID, taskID, role
func (_m *TaskUsecase) DeleteTask(userID string, taskID string, role string) interface{} {
	ret := _m.Called(userID, taskID, role)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string, string) interface{}); ok {
		r0 = rf(userID, taskID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetAllTask provides a mock function with given fields:
func (_m *TaskUsecase) GetAllTask() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTask")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetTaskByID provides a mock function with given fields: id, role
func (_m *TaskUsecase) GetTaskByID(id string, role string) interface{} {
	ret := _m.Called(id, role)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(id, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetTasksByUserID provides a mock function with given fields: id
func (_m *TaskUsecase) GetTasksByUserID(id string) interface{} {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByUserID")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// UpdateTask provides a mock function with given fields: userID, taskid, task
func (_m *TaskUsecase) UpdateTask(userID string, taskid string, task domain.Task) interface{} {
	ret := _m.Called(userID, taskid, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string, domain.Task) interface{}); ok {
		r0 = rf(userID, taskid, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
