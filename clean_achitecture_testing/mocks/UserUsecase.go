// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "task7/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserUsecase) DeleteUser(id string) interface{} {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *UserUsecase) GetAllUsers() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Login provides a mock function with given fields: email, password
func (_m *UserUsecase) Login(email string, password string) interface{} {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// RegisterUser provides a mock function with given fields: user
func (_m *UserUsecase) RegisterUser(user domain.User) interface{} {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(domain.User) interface{}); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// UpdateUser provides a mock function with given fields: id, user, role
func (_m *UserUsecase) UpdateUser(id string, user *domain.User, role string) interface{} {
	ret := _m.Called(id, user, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, *domain.User, string) interface{}); ok {
		r0 = rf(id, user, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
